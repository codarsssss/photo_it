from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import bot
from data_base import data_from_bot
from config import LIST_ADMIN, GROUP_ID_DEVELOPERS


class FSMAdmin(StatesGroup):
    choice = State()
    date = State()
    number = State()
    status = State()


async def welcome_admin(message: types.Message):
    try:
        if message.from_user.username in LIST_ADMIN:
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω.')
            await create_admin_bottom(message)
        else:
            await message.reply('–¢—ã —Ç—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å. –£—Ö–æ–¥–∏!!!')
    except:
        pass


async def create_admin_bottom(message: types.Message):
    try:
        admin_bottom = ['–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å', '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', '–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ']
        mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mark_up.add(*admin_bottom)
        await FSMAdmin.choice.set()
        await message.answer('–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=mark_up)
    except:
        pass


async def set_command(message: types.Message, state=FSMContext):
    if message.text == '–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å':
        await FSMAdmin.date.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É **.**.**')
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å':
        await FSMAdmin.number.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', reply_markup=types.ReplyKeyboardRemove())
    elif message.text == '–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ':
        answer = data_from_bot.get_in_job()
        if len(answer):
            miss_text = ''
            for info in answer:
                miss_text += f'‚Ññ{info[0]}\n–°—Ç–∞—Ç—É—Å: *{info[8]}*, –í—ã–¥–∞—á–∞: {info[7]}\n–ö–ª–∏–µ–Ω—Ç: {info[4]}, ' \
                             f'–£—Å–ª—É–≥–∞: {info[5]}, –°—Ç–æ–∏–º–æ—Å—Ç—å: {info[6]}\n–í—Ä–µ–º—è: {info[2]}, –û–ø–ª–∞—Ç–∞: {info[9]}\n\n'
            try:
                await message.answer(miss_text, parse_mode='Markdown')
            except:
                long = len(miss_text) // 4
                await message.answer(miss_text[:long], parse_mode='Markdown')
                await message.answer(miss_text[long:long*2], parse_mode='Markdown')
                await message.answer(miss_text[long*2:long*3], parse_mode='Markdown')
                await message.answer(miss_text[long*3:], parse_mode='Markdown')
        else:
            await message.answer('–í—Å–µ –∑–∞–∫–∞–∑—ã –≤—ã–¥–∞–ª–∏. –ú–æ–ª–æ–¥—Ü—ã! üòΩ')
        await state.finish()
        await create_admin_bottom(message)


async def ask_status(message: types.Message, state=FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['number'] = message.text
        status_bottom = ['–ü—Ä–∏–Ω—è—Ç', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –º–∞–∫–µ—Ç–∞', '–í –ø–µ—á–∞—Ç–∏', '–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞', '–í—ã–¥–∞–Ω–æ']
        mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mark_up.add(*status_bottom)
        await FSMAdmin.status.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å', reply_markup=mark_up)
    else:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: 69')


async def set_status(message: types.Message, state=FSMContext):
    if message.text in ['–ü—Ä–∏–Ω—è—Ç', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –º–∞–∫–µ—Ç–∞', '–í –ø–µ—á–∞—Ç–∏', '–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞', '–í—ã–¥–∞–Ω–æ']:
        async with state.proxy() as data:
            answer = data_from_bot.setting_status(message.text, data['number'])
            if message.text == '–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞':
                inline_mark_up = types.InlineKeyboardMarkup()
                touch_isee = types.InlineKeyboardButton('–Ø —É–≤–∏–¥–µ–ª. –ú–æ–∂–Ω–æ –Ω–µ –∑–≤–æ–Ω–∏—Ç—å',
                                                        callback_data='–ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ')
                inline_mark_up.add(touch_isee)
                await bot.send_message(answer[0], f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ *{answer[1]}* –∏–∑–º–µ–Ω—ë–Ω: *{message.text}*',
                                       reply_markup=inline_mark_up, parse_mode='Markdown')
            else:
                await bot.send_message(answer[0], f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ *{answer[1]}* –∏–∑–º–µ–Ω—ë–Ω: *{message.text}*',
                                       parse_mode='Markdown')
        await bot.send_message(message.chat.id, f'–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{message.text}*. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–ª–µ–Ω–Ω–æ',
                               parse_mode='Markdown')
        await state.finish()
        await create_admin_bottom(message)
    else:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π!')


async def orders_from_db(message: types.Message, state=FSMContext):
    day = message.text
    answer = data_from_bot.get_content_for_admin(day)
    if len(answer):
        miss_text = ''
        for info in answer:
            miss_text += f'‚Ññ{info[0]}\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: *{info[8]}*, –î–∞—Ç–∞ –≤—ã–¥–∞—á–∞: {info[7]}\n–ö–ª–∏–µ–Ω—Ç: {info[4]}, ' \
                             f'–£—Å–ª—É–≥–∞: {info[5]}, –°—Ç–æ–∏–º–æ—Å—Ç—å: {info[6]}\n–í—Ä–µ–º—è: {info[2]}, –û–ø–ª–∞—Ç–∞: {info[9]}\n\n'
        try:
            await message.answer(miss_text, parse_mode='Markdown')
        except:
            long = len(miss_text) // 4
            await message.answer(miss_text[:long], parse_mode='Markdown')
            await message.answer(miss_text[long:long * 2], parse_mode='Markdown')
            await message.answer(miss_text[long * 2:long * 3], parse_mode='Markdown')
            await message.answer(miss_text[long * 3:], parse_mode='Markdown')
        await state.finish()
        await create_admin_bottom(message)
    else:
        await message.reply('–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤', reply_markup=types.ReplyKeyboardRemove())


def admin_decorator(func):
    async def wrapper(message, state=FSMContext):
        try:
            return await func(message, state)
        except:
            await state.finish()
            await bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            await bot.send_message(GROUP_ID_DEVELOPERS, f'–£ –ê–¥–º–∏–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}')
            await create_admin_bottom(message)

    return wrapper


def admin_register_handlers(dp: Dispatcher):
    dp.register_message_handler(welcome_admin, commands=['admin'])
    dp.register_message_handler(admin_decorator(set_command), state=FSMAdmin.choice)
    dp.register_message_handler(admin_decorator(orders_from_db), state=FSMAdmin.date)
    dp.register_message_handler(admin_decorator(ask_status), state=FSMAdmin.number)
    dp.register_message_handler(admin_decorator(set_status), state=FSMAdmin.status)
