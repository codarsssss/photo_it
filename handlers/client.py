from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import bot
from data_base import data_from_bot
from clientmap import photo, vizit, lists, booklets, fliers, banner, self_adhesive, photo_paper, city_lite, \
    magnet_vinil, plotter_cut, contour_cut, plates, light_box
from handlers.other import main_decorator
from config import CHANNEL_ID_ADMIN


class FSMClientMain(StatesGroup):
    first = State()
    second = State()
    third = State()


async def send_welcome(message: types.Message, state=FSMContext):
    try:
        sticker = data_from_bot.get_content_for_client('sticker_hello')
        await bot.send_sticker(message.chat.id, sticker=sticker[0])
        await bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! '
                                                f'–Ø –∑–¥–µ—Å—å —á—Ç–æ –±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ–π. üê±ü§ñ')
        await bot.send_message(message.chat.id, message.chat.id)
        await create_main_bottom(message)
    except:
        pass


async def create_main_bottom(message: types.Message, state=FSMContext):
    try:
        main_bottom = ['–§–æ—Ç–æ–ø–µ—á–∞—Ç—å üì∏', '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è üñ®', '–°—É–≤–µ–Ω–∏—Ä—ã üõç(–°–ö–û–†–û)', '–£—Å–ª—É–≥–∏ üë©üèª‚Äçüé®(–°–ö–û–†–û)', '–û –Ω–∞—Å üìù']
        mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mark_up.add(*main_bottom)
        await FSMClientMain.first.set()
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=mark_up)
    except:
        pass


async def create_poly_bottom(message: types.Message, state=FSMContext):
    poly_bottom = ['–§–ª–∞–µ—Ä—ã üìÑ', '–ë—É–∫–ª–µ—Ç—ã üìñ', '–õ–∏—Å—Ç–æ–≤–∫–∏ üìÉ', '–ö–æ–Ω—Ç—É—Ä–Ω–∞—è —Ä–µ–∑–∫–∞ ‚úÇ', '–ü–ª–æ—Ç—Ç–µ—Ä–Ω–∞—è —Ä–µ–∑–∫–∞ üó°',
                   '–í–∏–∑–∏—Ç–∫–∏ ü™™', '–®–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å üì†', '–°–≤–µ—Ç–æ–≤–æ–π –∫–æ—Ä–æ–± üóÉ', '–ö–∞–ª–µ–Ω–¥–∞—Ä–∏ üìÜ(–°–ö–û–†–û)',
                   '–¢–∞–±–ª–∏—á–∫–∏ ü™ß', '–ù–∞–∑–∞–¥ üîô']
    mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mark_up.add(*poly_bottom[:7])
    mark_up.add(*poly_bottom[7:9])
    mark_up.add(*poly_bottom[9:])
    img = data_from_bot.get_content_for_client('img_poly')
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é:', reply_markup=mark_up)


async def create_large_bottom(message: types.Message, state=FSMContext):
    large_bottom = ['–ë–∞–Ω–Ω–µ—Ä', '–°–∞–º–æ–∫–ª–µ–π–∫–∞', '–§–æ—Ç–æ–±—É–º–∞–≥–∞\n220 –≥—Ä/–º',
                    'CityLite –±—É–º–∞–≥–∞ 150–≥\n–î–ª—è —Å–≤–µ—Ç–æ–≤–æ–π —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ—Å—Ç–µ—Ä–æ–≤', '–ú–∞–≥–Ω–∏—Ç –≤–∏–Ω–∏–ª–æ–≤—ã–π 0,4–º–º', '–ù–∞–∑–∞–¥ üîô']
    mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mark_up.add(*large_bottom[:4])
    mark_up.add(*large_bottom[4:])
    await bot.send_message(message.chat.id, '–ö–∞–∫–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=mark_up)


async def distribution_commands(message: types.Message, state=FSMContext):
    if message.text == '–§–æ—Ç–æ–ø–µ—á–∞—Ç—å üì∏':
        await photo.get_size_photo(message)
    elif message.text == '–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è üñ®':
        await FSMClientMain.second.set()
        await create_poly_bottom(message)
    elif message.text == '–°—É–≤–µ–Ω–∏—Ä—ã üõç(–°–ö–û–†–û)':
        pass
    elif message.text == '–£—Å–ª—É–≥–∏ üë©üèª‚Äçüé®(–°–ö–û–†–û)':
        pass
    elif message.text == '–£—Å–ª—É–≥–∏ üë©üèª‚Äçüé®(–°–ö–û–†–û)':
        pass
    elif message.text == '–û –Ω–∞—Å üìù':
        await bot.send_message(message.chat.id, '–ú—ã –∫–ª–µ–≤—ã–µ –æ—á–µ–Ω—å.')
        # await bot.send_message(message.chat.id, 'https://www.youtube.com/watch?v=W4crQPeEIoM&t')
        img = data_from_bot.get_content_for_client('img_about_us')
        mark_up = types.InlineKeyboardMarkup()
        touch_map = types.InlineKeyboardButton('–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', url='https://yandex.ru/maps/35/krasnodar/?ll'
                                                                            '=38.979258%2C45.057761&mode=routes&rtext'
                                                                            '=~45.101166%2C38.980207&rtt=auto&ruri'
                                                                            '=~ymapsbm1%3A%2F%2Forg%3Foid'
                                                                            '%3D1308113072&z=13')
        mark_up.add(touch_map)
        await bot.send_photo(message.chat.id, img[0], '–ú—ã –∂–¥–µ–º –≤–∞—Å –Ω–∞ –î–∑–µ—Ä–∏–Ω—Å–∫–æ–≥–æ, 223.', reply_markup=mark_up)


async def distribution_commands_poly(message: types.Message, state=FSMContext):
    if message.text == '–í–∏–∑–∏—Ç–∫–∏ ü™™':
        await vizit.get_amount_vizit(message)
    elif message.text == '–§–ª–∞–µ—Ä—ã üìÑ':
        await fliers.get_amount_fliers(message)
    elif message.text == '–ë—É–∫–ª–µ—Ç—ã üìñ':
        await booklets.get_amount_booklets(message)
    elif message.text == '–õ–∏—Å—Ç–æ–≤–∫–∏ üìÉ':
        await lists.get_amount_lists(message)
    elif message.text == '–®–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å üì†':
        await FSMClientMain.third.set()
        await create_large_bottom(message)
    elif message.text == '–ö–∞–ª–µ–Ω–¥–∞—Ä–∏ üìÜ(–°–ö–û–†–û)':
        await bot.send_message(message.chat.id, '–°–∫–æ—Ä–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã. –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ '
                                                '—É—Å–ø–µ–µ–º –∑–∞–∫–∞–∑–∞—Ç—å, –∏–∑–≥–æ—Ç–æ–≤–∏—Ç—å, –æ—Ç–¥–∞—Ç—å...–ø–æ–¥–∞—Ä–∏—Ç—å)')
    elif message.text == '–ü–ª–æ—Ç—Ç–µ—Ä–Ω–∞—è —Ä–µ–∑–∫–∞ üó°':
        await plotter_cut.get_color_plotter(message)
    elif message.text == '–ö–æ–Ω—Ç—É—Ä–Ω–∞—è —Ä–µ–∑–∫–∞ ‚úÇ':
        await contour_cut.get_size_contour(message)
    elif message.text == '–¢–∞–±–ª–∏—á–∫–∏ ü™ß':
        await plates.get_size_plates(message)
    elif message.text == '–°–≤–µ—Ç–æ–≤–æ–π –∫–æ—Ä–æ–± üóÉ':
        await light_box.get_size_light_box(message)
    elif message.text == '–ù–∞–∑–∞–¥ üîô':
        await state.finish()
        await create_main_bottom(message)


async def distribution_commands_large(message: types.Message, state=FSMContext):
    if message.text == '–ë–∞–Ω–Ω–µ—Ä':
        await banner.get_material_type_banner(message)
    elif message.text == '–°–∞–º–æ–∫–ª–µ–π–∫–∞':
        await self_adhesive.get_material_type_self(message)
    elif message.text == '–§–æ—Ç–æ–±—É–º–∞–≥–∞\n220 –≥—Ä/–º':
        await photo_paper.get_size_paper(message)
    elif message.text == 'CityLite –±—É–º–∞–≥–∞ 150–≥\n–î–ª—è —Å–≤–µ—Ç–æ–≤–æ–π —Ä–µ–∫–ª–∞–º—ã –∏ –ø–æ—Å—Ç–µ—Ä–æ–≤':
        await city_lite.get_size_city(message)
    elif message.text == '–ú–∞–≥–Ω–∏—Ç –≤–∏–Ω–∏–ª–æ–≤—ã–π 0,4–º–º':
        await magnet_vinil.get_size_magnet(message)
    elif message.text == '–ù–∞–∑–∞–¥ üîô':
        await FSMClientMain.second.set()
        await create_poly_bottom(message)
    else:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π!')


async def treatment_callback(call: types.CallbackQuery):
    if call.data == '–ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ù–∞—à –∞–¥—Ä–µ—Å: –≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ, –¥. 223\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n–ü–ù-–ü–¢: —Å '
                                         '9:00 –¥–æ 18:00\nC–ë: c 10:00 –¥–æ 16:00\n–í–°: –≤—ã—Ö–æ–¥–Ω–æ–π')
        number = data_from_bot.get_number_order(call.message.chat.id)
        await bot.send_message(CHANNEL_ID_ADMIN, f'–ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ. –ó–∞–∫–∞–∑ ‚Ññ{number}')


def client_register_handlers(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start', 'help'])
    dp.register_message_handler(main_decorator(distribution_commands), state=FSMClientMain.first)
    dp.register_message_handler(main_decorator(distribution_commands_poly), state=FSMClientMain.second)
    dp.register_message_handler(main_decorator(distribution_commands_large), state=FSMClientMain.third)
    dp.register_callback_query_handler(treatment_callback, lambda x: x.data, state=FSMClientMain.first)
    dp.register_callback_query_handler(treatment_callback, lambda x: x.data)
