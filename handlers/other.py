from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import bot
from handlers import client
from config import URL_ADMIN, CHANNEL_ID_ADMIN, GROUP_ID_DEVELOPERS
from data_base import data_from_bot
from datetime import datetime, timedelta
import pay_orders

inline_touch_admin = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üë®‚Äçüíª',
                                                                                 url=URL_ADMIN))
touch_send_application = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å '
                                                                                                  '–∑–∞—è–≤–∫—É ‚úÖ'))
list_with_sizes_for_photo = ['10—Ö15', '15—Ö21', '21—Ö30', '30—Ö40']
list_with_amount_for_poly = ['500—à—Ç', '1000—à—Ç', '2000—à—Ç', '2500—à—Ç', '3000—à—Ç', '4000—à—Ç', '5000—à—Ç', '10000—à—Ç']
list_with_sizes_for_lists = ['–ê7', '–ê6', '–ê5', '–ê4']
list_with_sizes_for_booklets = ['–ê6 > –ê7', '–ê5 > –ê6', '–ê4 > –ê5', '–ê3 > –ê4', '–ï–≤—Ä–æ–±—É–∫–ª–µ—Ç 210—Ö198 > 210—Ö99']
list_with_sizes_for_fliers = ['–ï–≤—Ä–æ—Ñ–ª–∞–µ—Ä 210—Ö99', '–ú–∏–Ω–∏ —Ñ–ª–∞–µ—Ä 150—Ö90']
list_with_papers_for_poly = ['115', '130', '300', '80', '90', '200']


class FSMPAY(StatesGroup):
    pay = State()


async def application(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        today, time_now = datetime.today(), datetime.now()
        ready_date = today + timedelta(days=6)
        number = data_from_bot.get_number() + 1
        data['–°—Ç–æ–∏–º–æ—Å—Ç—å'] = data['–°—Ç–æ–∏–º–æ—Å—Ç—å'].split('.')[0] + '.'
        data_from_bot.add_content(number, today.strftime('%d.%m.%y'), time_now.strftime('%H:%M'),
                                  str(message.from_user.id), '@' + str(message.from_user.username),
                                  data['–£—Å–ª—É–≥–∞'], data['–°—Ç–æ–∏–º–æ—Å—Ç—å'], ready_date.strftime("%d.%m"), '–ü–æ–ª—É—á–µ–Ω–æ',
                                  '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ')
        mess_text = ''
        for key, value in data.items():
            mess_text += '{} - {}\n'.format(key, value)
        await state.finish()
        inline_markup = types.InlineKeyboardMarkup(row_width=1)
        touch_after = types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ—Ç–æ–º', callback_data='after')
        touch_pay = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data=f'pay {number}')
        inline_markup.add(touch_after, touch_pay)
        await FSMPAY.pay.set()
        sticker = data_from_bot.get_content_for_client('sticker_admin')
        await bot.send_sticker(message.chat.id, sticker=sticker[0], reply_markup=types.ReplyKeyboardRemove())
        await bot.send_message(message.chat.id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞: \n{mess_text}', reply_markup=inline_markup)
        mess_text = f'‚Ññ{number}\n' + mess_text + '–ö–ª–∏–µ–Ω—Ç - @{}\n–ò–º—è - {}'.format(str(message.from_user.username),
                                                                                 message.from_user.first_name)
        await bot.send_message(CHANNEL_ID_ADMIN, mess_text)


async def design_application(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        if message.text != '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ':
            data['–î–∏–∑–∞–π–Ω–µ—Ä'] += message.text + '\n'
        else:
            today, time_now = datetime.today(), datetime.now()
            ready_date = today + timedelta(days=2)
            number = data_from_bot.get_number() + 1
            data_from_bot.add_content(number, today.strftime('%d.%m.%y'), time_now.strftime('%H:%M'),
                                      str(message.from_user.id), '@' + str(message.from_user.username),
                                      '–î–∏–∑–∞–π–Ω', '-', ready_date.strftime("%d.%m"), '–ü–æ–ª—É—á–µ–Ω–æ',
                                      '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ')
            sticker = data_from_bot.get_content_for_client('sticker_admin')
            await bot.send_sticker(message.chat.id, sticker=sticker[0])
            if message.from_user.username is not None:
                await bot.send_message(message.chat.id, '–Ø —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –î–∏–∑–∞–π–Ω–µ—Ä—É, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ '
                                                        '—Å–≤—è–∂–µ—Ç—Å—è! \n\n'
                                                        '–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å '
                                                        '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–£—Å–ø–µ—Ö–æ–≤!',
                                       reply_markup=inline_touch_admin)
            else:
                await bot.send_message(message.chat.id,
                                       '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n–£—Å–ø–µ—Ö–æ–≤!',
                                       reply_markup=inline_touch_admin)
            mess_text = f'‚Ññ{number}\n–î–ª—è –î–∏–∑–∞–π–Ω–µ—Ä–∞\n–£—Å–ª—É–≥–∞: {data["–£—Å–ª—É–≥–∞"]}\n–¢–∏—Ä–∞–∂: {data["–¢–∏—Ä–∞–∂"]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:' \
                        f'\n{data["–î–∏–∑–∞–π–Ω–µ—Ä"]}\n–ö–ª–∏–µ–Ω—Ç - @{str(message.from_user.username)}\n–ò–º—è - {message.from_user.first_name}'
            await bot.send_message(CHANNEL_ID_ADMIN, mess_text)
            await state.finish()
            await client.create_main_bottom(message)


async def get_pay_callback(call: types.CallbackQuery, state=FSMContext):
    if call.data.split()[0] == 'pay':
        await state.finish()
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        base = data_from_bot.get_content_for_number(int(call.data.split()[1]))
        await pay_orders.pay_order(call.message, base)
    else:
        if call.message.from_user.username is not None:
            await bot.send_message(call.message.chat.id, '–Ø —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –í–∞—à—É –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. '
                                                         '–û–Ω —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è! \n\n–ï—Å–ª–∏ –¥–µ–ª–æ —Å—Ä–æ—á–Ω–æ–µ, –í—ã –º–æ–∂–µ—Ç–µ '
                                                         '—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É üë®‚Äçüíª',
                                   reply_markup=inline_touch_admin)
        else:
            await bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º '
                                                         '–Ω–∞–∂–∞—Ç–∏–µ–º —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ ‚¨á', reply_markup=inline_touch_admin)
            await bot.send_message(call.message.chat.id, '–ß—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º, '
                                                         '–∑–∞–¥–∞–π—Ç–µ —Å–µ–±–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Å—ã–ª–∫—É) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö '
                                                         '–¢–µ–ª–µ–≥—Ä–∞–º–º üìå')
        await state.finish()
        await client.create_main_bottom(call.message)


async def foo(message):
    await bot.send_message(message.chat.id, '–Ø —É—Å–Ω—É–ªüê±üí§... –†–∞–∑–±—É–¥–∏—Ç–µ –º–µ–Ω—è –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ /start')


def main_decorator(func):
    async def wrapper(message, state=FSMContext):
        try:
            if message.text != '/start':
                return await func(message, state)
            else:
                await state.finish()
                await client.create_main_bottom(message)
        except:
            await state.finish()
            await bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            await bot.send_message(GROUP_ID_DEVELOPERS, f'–£ @{message.from_user.username} –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ '
                                                        f'{func.__name__}')
            await client.create_main_bottom(message)

    return wrapper


def foo_register_handlers(dp: Dispatcher):
    dp.register_message_handler(foo)
    dp.register_callback_query_handler(get_pay_callback, lambda x: x.data, state=FSMPAY.pay)
