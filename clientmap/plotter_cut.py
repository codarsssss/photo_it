from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from count_price import count_price_of_plotter
from create_bot import bot
from data_base import data_from_bot
from handlers import client
from handlers.other import main_decorator, touch_send_application, application, design_application
from datetime import datetime, timedelta
import os
import os.path


class FSMClientPlotter(StatesGroup):
    color = State()
    size = State()
    choice = State()
    files = State()
    application = State()
    design_application = State()


async def get_color_plotter(message: types.Message, state=FSMContext):
    img = data_from_bot.get_content_for_client('img_plotter')
    await bot.send_photo(message.chat.id, img[0], reply_markup=types.ReplyKeyboardRemove())
    await create_color_bottom(message)


async def create_color_bottom(message: types.Message, state=FSMContext):
    color_id = ['3700', '3732', '3786', '3710', '3762', '3782', '3714', '3738', '3752', '3720', '3740', '3754',
                '3722', '3742', '3750', '3724', '3744', '3756', '3726', '3748', '3718', '3734', '3746', '3792',
                '3730', '3784', '3796']
    mark_up = types.InlineKeyboardMarkup()
    color_bottom = []
    for i in color_id:
        color_touch = types.InlineKeyboardButton(i, callback_data=f'{i}')
        color_bottom.append(color_touch)
    touch_back = types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
    mark_up.add(*color_bottom)
    mark_up.add(touch_back)
    await FSMClientPlotter.color.set()
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–ª–µ–∫–Ω–∫–∏:', reply_markup=mark_up)


async def get_color_callback(call: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
        data['–£—Å–ª—É–≥–∞'] = '–ü–ª–æ—Ç—Ç–µ—Ä–Ω–∞—è —Ä–µ–∑–∫–∞'
        if call.data == 'back':
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            await bot.delete_message(call.message.chat.id, data['–£–¥–∞–ª–µ–Ω–∏–µ'].message_id)
            await create_color_bottom(call.message)
        elif call.data == 'okey':
            del data['–£–¥–∞–ª–µ–Ω–∏–µ']
            await FSMClientPlotter.size.set()
            await bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {data["–¶–≤–µ—Ç"]}')
            await bot.send_message(call.message.chat.id,
                                   '–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: 80 120')
        elif call.data == 'main':
            await state.finish()
            await client.create_main_bottom(call.message)
        else:
            data['–¶–≤–µ—Ç'] = call.data
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            sticker = data_from_bot.get_content_for_client(f'sticker_{call.data}')
            data['–£–¥–∞–ª–µ–Ω–∏–µ'] = await bot.send_sticker(call.message.chat.id, sticker[0])
            mark_up = types.InlineKeyboardMarkup(row_width=1)
            touch_ok = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ü–≤–µ—Ç ‚úÖ', callback_data='okey')
            touch_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
            mark_up.add(touch_ok, touch_back)
            await bot.send_message(call.message.chat.id, f'–í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ü–≤–µ—Ç: {call.data}', reply_markup=mark_up)


async def get_choice_design(message: types.Message, state=FSMContext):
    try:
        x, y = message.text.split()
        if x.isdigit() and y.isdigit():
            async with state.proxy() as data:
                data['–†–∞–∑–º–µ—Ä'] = f'{x}x{y}'
                data['–°—Ç–æ–∏–º–æ—Å—Ç—å'] = count_price_of_plotter(int(x), int(y))
            sticker = data_from_bot.get_content_for_client('sticker_plotter')
            choice_bottom = ['–í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–µ—Ä–µ–π–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚úÖ', '–ó–∞–∫–∞–∑–∞—Ç—å –º–∞–∫–µ—Ç —É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ üë©üèª‚Äçüé®']
            mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            mark_up.add(*choice_bottom)
            await FSMClientPlotter.choice.set()
            await bot.send_sticker(message.chat.id, sticker=sticker[0])
            await bot.send_message(message.chat.id, f'–°–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏—Ç:\n'
                                                    f'*{data["–°—Ç–æ–∏–º–æ—Å—Ç—å"]}*\n\n–£ –≤–∞—Å –µ—Å—Ç—å –¥–∏–∑–∞–π–Ω –º–∞–∫–µ—Ç?',
                                   reply_markup=mark_up, parse_mode='Markdown')
        else:
            await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n–í —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: 80 120')
    except:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞: —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞\n–ü—Ä–∏–º–µ—Ä: 80 120')


async def get_design_layout(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –º–∞–∫–µ—Ç —É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ üë©üèª‚Äçüé®':
            data['–î–∏–∑–∞–π–Ω–µ—Ä'] = ''
            await FSMClientPlotter.design_application.set()
            await bot.send_message(message.chat.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –º–∞–∫–µ—Ç–∞ 700—Ä, –¥–ª—è –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–µ–≥–æ 1200—Ä.\n'
                                                    '–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏.',
                                   reply_markup=touch_send_application)
        elif message.text == '–í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–µ—Ä–µ–π–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚úÖ':
            try:
                os.mkdir('files/{}{}'.format(str(message.from_user.username), message.from_user.id))
                os.mkdir(
                    'files/{}{}/{}'.format(str(message.from_user.username), message.from_user.id, data['–£—Å–ª—É–≥–∞']))
            except FileExistsError:
                pass
            await FSMClientPlotter.files.set()
            await bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª. –†–µ–∫–æ–º–µ–Ω–¥–∞–≤–∞–Ω–æ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è TIFF, CMD...',
                                   reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).
                                   add(types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂')))


async def get_layout_files(message: types.Message, state=FSMContext):
    try:
        if message.text != '/start':
            async with state.proxy() as data:
                file_path = 'files/{}{}/{}'.format(str(message.from_user.username), message.from_user.id,
                                                   data['–£—Å–ª—É–≥–∞'])
                if message.document:
                    img_id = await bot.get_file(message.document.file_id)
                    foo, extension = img_id.file_path.split('.')
                    saved_image = '{}/{}{}'.format(file_path, img_id.file_id, f'.{extension}')
                    await message.document.download(f'{saved_image}')
                    await bot.send_message(message.chat.id, '–ú–∞–∫–µ—Ç –ø–æ–ª—É—á–µ–Ω. –£—Ä–∞!')
                elif message.text:
                    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂':
                        file_path_os = os.listdir(path=file_path)
                        if len(file_path_os) > 0:
                            ready_date = datetime.today() + timedelta(days=+6)
                            await FSMClientPlotter.application.set()
                            await bot.send_message(message.chat.id,
                                                   f'–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–∞–≤–∞–Ω–∞. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. '
                                                   f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {ready_date.strftime("%d.%m")}\n'
                                                   f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=touch_send_application)
                        else:
                            await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫–µ—Ç!')
        else:
            await state.finish()
            await client.create_main_bottom(message)
    except:
        await FSMClientPlotter.files.set()
        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞–∫–µ—Ç.')


def plotter_register_handlers(dp: Dispatcher):
    dp.register_message_handler(main_decorator(get_color_plotter), state=None)
    dp.register_callback_query_handler(get_color_callback, lambda x: x.data, state=FSMClientPlotter.color)
    dp.register_message_handler(main_decorator(get_choice_design), state=FSMClientPlotter.size)
    dp.register_message_handler(main_decorator(get_design_layout), state=FSMClientPlotter.choice)
    dp.register_message_handler(get_layout_files, content_types=['document', 'text'], state=FSMClientPlotter.files)
    dp.register_message_handler(main_decorator(design_application), state=FSMClientPlotter.design_application)
    dp.register_message_handler(main_decorator(application), state=FSMClientPlotter.application)
