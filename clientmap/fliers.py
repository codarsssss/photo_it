from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from count_price import count_price_of_fliers
from create_bot import bot
from data_base import data_from_bot
from handlers import client
from handlers.other import main_decorator, list_with_amount_for_poly, list_with_sizes_for_fliers, \
    list_with_papers_for_poly, touch_send_application, design_application, application
from datetime import datetime, timedelta
import os
import os.path


class FSMClientFliers(StatesGroup):
    amount = State()
    size = State()
    type_paper = State()
    choice = State()
    files = State()
    application = State()
    design_application = State()


async def get_amount_fliers(message: types.Message, state=FSMContext):
    amount_bottom = ['500—à—Ç', '1000—à—Ç ‚≠ê', '2500—à—Ç', '5000—à—Ç', '10000—à—Ç']
    mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mark_up.add(*amount_bottom)
    await FSMClientFliers.amount.set()
    sticker = data_from_bot.get_content_for_client('sticker_fliers')
    await bot.send_sticker(message.chat.id, sticker=sticker[0])
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä–∞–∂:', reply_markup=mark_up)


async def get_size_fliers(message: types.Message, state=FSMContext):
    if message.text.split()[0] in list_with_amount_for_poly:
        async with state.proxy() as data:
            data['–£—Å–ª—É–≥–∞'] = '–§–ª–∞–µ—Ä—ã'
            data['–¢–∏—Ä–∞–∂'] = message.text.split()[0]
        mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
        size_bottom = ['–ï–≤—Ä–æ—Ñ–ª–∞–µ—Ä 210—Ö99', '–ú–∏–Ω–∏ —Ñ–ª–∞–µ—Ä 150—Ö90']
        mark_up.add(*size_bottom)
        await FSMClientFliers.size.set()
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä', reply_markup=mark_up)
    else:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä–∞–∂ –∫–Ω–æ–ø–∫–æ–π')


async def get_paper_fliers(message: types.Message, state=FSMContext):
    if message.text in list_with_sizes_for_fliers:
        if message.text == '–ú–∏–Ω–∏ —Ñ–ª–∞–µ—Ä 150—Ö90':
            sticker = data_from_bot.get_content_for_client('sticker_mini_fliers')
            await bot.send_sticker(message.chat.id, sticker=sticker[0])
        async with state.proxy() as data:
            data['–†–∞–∑–º–µ—Ä'] = message.text
        paper_bottom = ['–ú–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n115 –≥/–º2', '–ú–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n130 –≥/–º2 ‚≠ê', '–ú–µ–ª–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ä—Ç–æ–Ω\n300 –≥/–º2',
                        '–û—Ñ—Å–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞\n80 –≥/–º2', '–ú–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n90 –≥/–º2', '–ú–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n200 –≥/–º2']
        mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        mark_up.add(*paper_bottom)
        await FSMClientFliers.type_paper.set()
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –±—É–º–∞–≥–∏:', reply_markup=mark_up)


async def get_choice_design(message: types.Message, state=FSMContext):
    if message.text.split()[2] in list_with_papers_for_poly:
        async with state.proxy() as data:
            data['–ë—É–º–∞–≥–∞'] = message.text.split('‚≠ê')[0]
            papers = {'500—à—Ç': 0, '1000—à—Ç': 1, '2500—à—Ç': 2, '5000—à—Ç': 3, '10000—à—Ç': 4}
            data['–°—Ç–æ–∏–º–æ—Å—Ç—å'] = count_price_of_fliers(papers[data['–¢–∏—Ä–∞–∂']], data['–†–∞–∑–º–µ—Ä'].split()[0],
                                                      int(data['–ë—É–º–∞–≥–∞'].split()[2]))
        choice_bottom = ['–í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–µ—Ä–µ–π–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚úÖ', '–ó–∞–∫–∞–∑–∞—Ç—å –º–∞–∫–µ—Ç —É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ üë©üèª‚Äçüé®']
        mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        mark_up.add(*choice_bottom)
        sticker = data_from_bot.get_content_for_client('sticker_design')
        await FSMClientFliers.choice.set()
        await bot.send_sticker(message.chat.id, sticker=sticker[0])
        await bot.send_message(message.chat.id, f'–°–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏—Ç:\n'
                                                f'*{data["–°—Ç–æ–∏–º–æ—Å—Ç—å"]}*\n\n–£ –≤–∞—Å –µ—Å—Ç—å –¥–∏–∑–∞–π–Ω –º–∞–∫–µ—Ç?',
                               reply_markup=mark_up, parse_mode='Markdown')
    else:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!')


async def get_design_layout(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –º–∞–∫–µ—Ç —É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ üë©üèª‚Äçüé®':
            data['–î–∏–∑–∞–π–Ω–µ—Ä'] = ''
            await FSMClientFliers.design_application.set()
            await bot.send_message(message.chat.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –º–∞–∫–µ—Ç–∞ 700—Ä, –¥–ª—è –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–µ–≥–æ 1200—Ä.\n'
                                                    '–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏.',
                                   reply_markup=touch_send_application)
        elif message.text == '–í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–µ—Ä–µ–π–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚úÖ':
            try:
                os.mkdir('files/{}{}'.format(str(message.from_user.username), message.from_user.id))
                os.mkdir(
                    'files/{}{}/{}'.format(str(message.from_user.username), message.from_user.id, data['–£—Å–ª—É–≥–∞']))
                os.mkdir(
                    'files/{}{}/{}/{}'.format(str(message.from_user.username), message.from_user.id, data['–£—Å–ª—É–≥–∞'],
                                              data['–¢–∏—Ä–∞–∂']))
            except FileExistsError:
                pass
            await FSMClientFliers.files.set()
            await bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª. –†–µ–∫–æ–º–µ–Ω–¥–∞–≤–∞–Ω–æ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è TIFF, CMD...',
                                   reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).
                                   add(types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂')))


async def get_layout_files(message: types.Message, state=FSMContext):
    try:
        if message.text != '/start':
            async with state.proxy() as data:
                file_path = 'files/{}{}/{}/{}'.format(str(message.from_user.username), message.from_user.id,
                                                      data['–£—Å–ª—É–≥–∞'], data['–¢–∏—Ä–∞–∂'])
                if message.document:
                    img_id = await bot.get_file(message.document.file_id)
                    foo, extension = img_id.file_path.split('.')
                    saved_image = '{}/{}{}'.format(file_path, img_id.file_id, f'.{extension}')
                    await message.document.download(f'{saved_image}')
                    await bot.send_message(message.chat.id, '–ú–∞–∫–µ—Ç –ø–æ–ª—É—á–µ–Ω. –£—Ä–∞!')
                elif message.text:
                    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂':
                        file_path_os = os.listdir(path=file_path)
                        if len(file_path_os) > 0:
                            ready_date = datetime.today() + timedelta(days=+6)
                            await FSMClientFliers.application.set()
                            await bot.send_message(message.chat.id,
                                                   f'–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–∞–≤–∞–Ω–∞. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. '
                                                   f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {ready_date.strftime("%d.%m")}\n'
                                                   f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=touch_send_application)
                        else:
                            await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫–µ—Ç!')
        else:
            await state.finish()
            await client.create_main_bottom(message)
    except:
        await FSMClientFliers.files.set()
        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞–∫–µ—Ç.')


def fliers_register_handlers(dp: Dispatcher):
    dp.register_message_handler(main_decorator(get_amount_fliers), state=None)
    dp.register_message_handler(main_decorator(get_size_fliers), state=FSMClientFliers.amount)
    dp.register_message_handler(main_decorator(get_paper_fliers), state=FSMClientFliers.size)
    dp.register_message_handler(main_decorator(get_choice_design), state=FSMClientFliers.type_paper)
    dp.register_message_handler(main_decorator(get_design_layout), state=FSMClientFliers.choice)
    dp.register_message_handler(get_layout_files, content_types=['document', 'text'], state=FSMClientFliers.files)
    dp.register_message_handler(main_decorator(design_application), state=FSMClientFliers.design_application)
    dp.register_message_handler(main_decorator(application), state=FSMClientFliers.application)
