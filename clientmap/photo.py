from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import bot
from data_base import data_from_bot
from handlers import client
from handlers.other import main_decorator, list_with_sizes_for_photo, touch_send_application, application
from count_price import count_price_of_photo
import os
import os.path


class FSMClientPhoto(StatesGroup):
    size = State()
    disclaimer = State()
    photos = State()
    application = State()


async def get_size_photo(message: types.Message, state=FSMContext):
    print(111)
    size_bottom = ['10—Ö15', '15—Ö21', '21—Ö30', '30—Ö40']
    mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mark_up.add(*size_bottom)
    sticker = data_from_bot.get_content_for_client('sticker_size')
    await FSMClientPhoto.size.set()
    await bot.send_sticker(message.chat.id, sticker=sticker[0])
    await bot.send_message(message.chat.id,
                           '–¶–µ–Ω—ã:\n10—Ö15 - 30—Ä—É–±.\n15—Ö21 - 60—Ä—É–±.\n21—Ö30 - 120—Ä—É–±.\n30—Ö40 - 490—Ä—É–±.\n\nüêà —Å–∞–º  '
                           '—Ä–∞—Å—Å—á–∏—Ç–∞—é —Å–∫–∏–¥–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª-–≤–∞ —Å–Ω–∏–º–∫–æ–≤!')
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–µ—á–∞—Ç–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚ÜòÔ∏è',
                           reply_markup=mark_up)


async def get_agreement(message: types.Message, state=FSMContext):
    if message.text in list_with_sizes_for_photo:
        async with state.proxy() as data:
            data['–£—Å–ª—É–≥–∞'] = '–§–æ—Ç–æ–ø–µ—á–∞—Ç—å'
            data['–†–∞–∑–º–µ—Ä'] = message.text
        await FSMClientPhoto.disclaimer.set()
        sticker = data_from_bot.get_content_for_client('sticker_margin')
        await bot.send_sticker(message.chat.id, sticker=sticker[0])
        await bot.send_message(message.chat.id, '–í–Ω–∏–º–∞–Ω–∏–µ‚ùï –ú—ã –ø–µ—á–∞—Ç–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é. '
                                                '–ï—Å–ª–∏ –≤–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º —Å—Ç–æ—Ä–æ–Ω '
                                                '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤, –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–ª—ã–µ –∫—Ä–∞—è, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ. '
                                                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.',
                               reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).
                               add(types.KeyboardButton('–Ø—Å–Ω–æ. –ü–æ–Ω—è—Ç–Ω–æ ‚òÄ')))
    else:
        await message.reply('–¢–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.')


async def create_folder(message: types.Message, state=FSMContext):
    if message.text == '–Ø—Å–Ω–æ. –ü–æ–Ω—è—Ç–Ω–æ ‚òÄ':
        async with state.proxy() as data:
            try:
                os.mkdir('files/{}{}'.format(str(message.from_user.username), message.from_user.id))
                os.mkdir('files/{}{}/{}'.format(str(message.from_user.username), message.from_user.id, data['–£—Å–ª—É–≥–∞']))
                os.mkdir(
                    'files/{}{}/{}/{}'.format(str(message.from_user.username), message.from_user.id, data['–£—Å–ª—É–≥–∞'],
                                              data['–†–∞–∑–º–µ—Ä']))
            except FileExistsError:
                pass
        await FSMClientPhoto.photos.set()
        await bot.send_message(message.chat.id,
                               '–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—á–∞—Ç–∏ üìéüì•\n–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, '
                               '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ –§–ê–ô–õ üìÑ\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–Ω–æ–ø–∫–æ–π üì∂, –Ω–∏–∂–µ',
                               reply_markup=types.
                               ReplyKeyboardMarkup(resize_keyboard=True).
                               add(types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂')))
    else:
        await message.reply('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–∏—è.')


async def download_image(message: types.Message, state=FSMContext):
    try:
        if message.text != '/start':
            async with state.proxy() as data:
                file_path = 'files/{}{}/{}/{}'.format(str(message.from_user.username), message.from_user.id,
                                                      data['–£—Å–ª—É–≥–∞'],
                                                      data['–†–∞–∑–º–µ—Ä'])
                if message.photo:
                    img_id = await bot.get_file(message.photo[-1].file_id)
                    foo, extension = img_id.file_path.split('.')
                    saved_image = '{}/{}{}'.format(file_path, img_id.file_id, f'.{extension}')
                    await message.photo[-1].download(f'{saved_image}')
                    # print(message.photo[-1].file_id)

                elif message.document:
                    img_id = await bot.get_file(message.document.file_id)
                    foo, extension = img_id.file_path.split('.')
                    saved_image = '{}/{}{}'.format(file_path, img_id.file_id, f'.{extension}')
                    await message.document.download(f'{saved_image}')

                elif message.text:
                    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂':
                        file_path_os = os.listdir(path=file_path)
                        if len(file_path_os) > 0:
                            data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = len(file_path_os)
                            price, discount = count_price_of_photo(data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], data['–†–∞–∑–º–µ—Ä'])
                            data['–°–∫–∏–¥–∫–∞'] = str(discount) + ' %'
                            data['–°—Ç–æ–∏–º–æ—Å—Ç—å'] = price
                            await FSMClientPhoto.application.set()
                            await bot.send_message(message.chat.id, f'–ü—Ä–∏–Ω—è–ª {data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]} —Ñ–æ—Ç–æ ‚úçÔ∏è',
                                                   reply_markup=touch_send_application)
                        else:
                            await FSMClientPhoto.photos.set()
                            await message.reply('–í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ.')
                    else:
                        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ.')
        else:
            await state.finish()
            await client.create_main_bottom(message)
    except:
        await FSMClientPhoto.photos.set()
        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ.')


def photo_register_handlers(db: Dispatcher):
    db.register_message_handler(main_decorator(get_size_photo), state=None)
    db.register_message_handler(main_decorator(get_agreement), state=FSMClientPhoto.size)
    db.register_message_handler(main_decorator(create_folder), state=FSMClientPhoto.disclaimer)
    db.register_message_handler(download_image, content_types=['photo', 'document', 'text'],
                                state=FSMClientPhoto.photos)
    db.register_message_handler(main_decorator(application), state=FSMClientPhoto.application)
