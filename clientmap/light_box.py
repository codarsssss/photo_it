from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from count_price import count_price_of_light_box
from create_bot import bot
from data_base import data_from_bot
from handlers import client
from handlers.other import main_decorator, touch_send_application, application, design_application
from datetime import datetime, timedelta
import os
import os.path


class FSMClientLight(StatesGroup):
    size = State()
    choice = State()
    files = State()
    application = State()
    design_application = State()


async def get_size_light_box(message: types.Message, state=FSMContext):
    sticker = data_from_bot.get_content_for_client('sticker_light_box')
    await FSMClientLight.size.set()
    await bot.send_sticker(message.chat.id, sticker=sticker[0])
    await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: 80 120',
                           reply_markup=types.ReplyKeyboardRemove())


async def get_choice_design(message: types.Message, state=FSMContext):
    try:
        x, y = message.text.split()
        if x.isdigit() and y.isdigit():
            async with state.proxy() as data:
                data['–£—Å–ª—É–≥–∞'] = '–°–≤–µ—Ç–æ–≤–æ–π –∫–æ—Ä–æ–±'
                data['–†–∞–∑–º–µ—Ä'] = f'{x}x{y}'
                data['–°—Ç–æ–∏–º–æ—Å—Ç—å'] = count_price_of_light_box(int(x), int(y))
            choice_bottom = ['–í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–µ—Ä–µ–π–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚úÖ', '–ó–∞–∫–∞–∑–∞—Ç—å –º–∞–∫–µ—Ç —É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ üë©üèª‚Äçüé®']
            mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            mark_up.add(*choice_bottom)
            await FSMClientLight.choice.set()
            await bot.send_message(message.chat.id, f'–°–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏—Ç:\n'
                                                    f'*{data["–°—Ç–æ–∏–º–æ—Å—Ç—å"]}*\n\n–£ –≤–∞—Å –µ—Å—Ç—å –¥–∏–∑–∞–π–Ω –º–∞–∫–µ—Ç?',
                                   reply_markup=mark_up, parse_mode='Markdown')
        else:
            await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n–í —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: 80 120')
    except:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞: —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞\n–ü—Ä–∏–º–µ—Ä: 80 120')


async def get_design_layout(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –º–∞–∫–µ—Ç —É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ üë©üèª‚Äçüé®':
            data['–î–∏–∑–∞–π–Ω–µ—Ä'] = ''
            await FSMClientLight.design_application.set()
            await bot.send_message(message.chat.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –º–∞–∫–µ—Ç–∞ 700—Ä, –¥–ª—è –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–µ–≥–æ 1200—Ä.\n'
                                                    '–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏.',
                                   reply_markup=touch_send_application)
        elif message.text == '–í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–µ—Ä–µ–π–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚úÖ':
            try:
                os.mkdir('files/{}{}'.format(str(message.from_user.username), message.from_user.id))
                os.mkdir(
                    'files/{}{}/{}'.format(str(message.from_user.username), message.from_user.id, data['–£—Å–ª—É–≥–∞']))
            except FileExistsError:
                pass
            await FSMClientLight.files.set()
            await bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª. –†–µ–∫–æ–º–µ–Ω–¥–∞–≤–∞–Ω–æ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è TIFF, CMD...',
                                   reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).
                                   add(types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂')))


async def get_layout_files(message: types.Message, state=FSMContext):
    try:
        if message.text != '/start':
            async with state.proxy() as data:
                file_path = 'files/{}{}/{}'.format(str(message.from_user.username), message.from_user.id,
                                                   data['–£—Å–ª—É–≥–∞'])
                if message.document:
                    img_id = await bot.get_file(message.document.file_id)
                    foo, extension = img_id.file_path.split('.')
                    saved_image = '{}/{}{}'.format(file_path, img_id.file_id, f'.{extension}')
                    await message.document.download(f'{saved_image}')
                    await bot.send_message(message.chat.id, '–ú–∞–∫–µ—Ç –ø–æ–ª—É—á–µ–Ω. –£—Ä–∞!')
                elif message.text:
                    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂':
                        file_path_os = os.listdir(path=file_path)
                        if len(file_path_os) > 0:
                            ready_date = datetime.today() + timedelta(days=+6)
                            await FSMClientLight.application.set()
                            await bot.send_message(message.chat.id,
                                                   f'–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–∞–≤–∞–Ω–∞. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. '
                                                   f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {ready_date.strftime("%d.%m")}\n'
                                                   f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=touch_send_application)
                        else:
                            await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫–µ—Ç!')
        else:
            await state.finish()
            await client.create_main_bottom(message)
    except:
        await FSMClientLight.files.set()
        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞–∫–µ—Ç.')


def light_box_register_handlers(dp: Dispatcher):
    dp.register_message_handler(main_decorator(get_size_light_box), state=None)
    dp.register_message_handler(main_decorator(get_choice_design), state=FSMClientLight.size)
    dp.register_message_handler(main_decorator(get_design_layout), state=FSMClientLight.choice)
    dp.register_message_handler(get_layout_files, content_types=['document', 'text'], state=FSMClientLight.files)
    dp.register_message_handler(main_decorator(design_application),
                                state=FSMClientLight.design_application)
    dp.register_message_handler(main_decorator(application), state=FSMClientLight.application)
