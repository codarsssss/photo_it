from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import bot
from handlers import client
from config import URL_ADMIN
from config import CHANNEL_ID_ADMIN
from data_base import data_from_bot
from handlers.other import main_decorator
from count_price import count_price_of_booklets
from datetime import datetime, timedelta
import os
import os.path


class Main(StatesGroup):
    st_amount = State()
    st_size = State()
    st_type_paper = State()
    st_choice = State()
    st_files = State()
    st_application = State()
    st_design_application = State()

    inline_touch_admin = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üë®‚Äçüíª', url=URL_ADMIN))
    touch_send_application = types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å '
                                                                                                      '–∑–∞—è–≤–∫—É ‚úÖ'))

    def __init__(self, name, sizes_photos, amount_poly, sizes_lists, sizes_booklets, sizes_fliers, papers_poly,
                 sizes_banners):
        self.name = name
        self.sizes_photos = sizes_photos  # ['10—Ö15', '15—Ö21', '21—Ö30', '30—Ö40']
        self.amount_poly = amount_poly  # ['500—à—Ç', '1000—à—Ç', '2000—à—Ç', '2500—à—Ç', '3000—à—Ç', '4000—à—Ç', '5000—à—Ç', '10000—à—Ç']
        self.sizes_lists = sizes_lists  # ['–ê7', '–ê6', '–ê5', '–ê4']
        self.sizes_booklets = sizes_booklets  # ['–ê6 > –ê7', '–ê5 > –ê6', '–ê4 > –ê5', '–ê3 > –ê4', '–ï–≤—Ä–æ–±—É–∫–ª–µ—Ç 210—Ö198 > 210—Ö99']
        self.sizes_fliers = sizes_fliers  # ['–ï–≤—Ä–æ—Ñ–ª–∞–µ—Ä 210—Ö99', '–ú–∏–Ω–∏ —Ñ–ª–∞–µ—Ä 150—Ö90']
        self.papers_poly = papers_poly  # ['115', '130', '300', '80', '90', '200']
        self.sizes_banners = sizes_banners  # ['–ë–∞–Ω–Ω–µ—Ä –ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 440 –≥—Ä/–º', '–ë–∞–Ω–Ω–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ 360 –≥—Ä/–º']

    async def get_amount(self, message: types.Message, state=FSMContext):
        amount_bottom = self.amount_poly
        mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mark_up.add(*amount_bottom)
        await Main.st_amount.set()
        sticker = data_from_bot.get_content_for_client('sticker_booklets')
        await bot.send_sticker(message.chat.id, sticker=sticker[0])
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä–∞–∂:', reply_markup=mark_up)

    async def get_size(self, message: types.Message, state=FSMContext):
        if message.text.split()[0] in self.amount_poly:
            async with state.proxy() as data:
                data['–£—Å–ª—É–≥–∞'] = self.name
                data['–¢–∏—Ä–∞–∂'] = message.text.split()[0]
            size_bottom = ['–ê6 > –ê7', '–ê4 > –ê5', '–ê3 > –ê4', '–ê5 > –ê6', '–ï–≤—Ä–æ–±—É–∫–ª–µ—Ç 210—Ö198 > 210—Ö99']
            mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True)
            mark_up.add(*size_bottom[:4])
            mark_up.add(size_bottom[4])
            await Main.st_size.set()
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä', reply_markup=mark_up)
        else:
            await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä–∞–∂ –∫–Ω–æ–ø–∫–æ–π')

    async def get_paper(self, message: types.Message, state=FSMContext):
        if message.text in self.sizes_booklets:
            if message.text == '–ï–≤—Ä–æ–±—É–∫–ª–µ—Ç 210—Ö198 > 210—Ö99':
                sticker = data_from_bot.get_content_for_client('sticker_eurobooklets')
                await bot.send_sticker(message.chat.id, sticker=sticker[0])
            async with state.proxy() as data:
                data['–†–∞–∑–º–µ—Ä'] = message.text
            paper_bottom = ['–ú–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n115 –≥/–º2', '–ú–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n130 –≥/–º2 ‚≠ê',
                            '–ú–µ–ª–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ä—Ç–æ–Ω\n300 –≥/–º2',
                            '–û—Ñ—Å–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞\n80 –≥/–º2', '–ú–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n90 –≥/–º2', '–ú–µ–ª–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞\n200 –≥/–º2']
            mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            mark_up.add(*paper_bottom)
            await Main.st_type_paper.set()
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –±—É–º–∞–≥–∏:', reply_markup=mark_up)

    async def get_choice_design(self, message: types.Message, state=FSMContext):
        if message.text.split()[2] in self.papers_poly:
            async with state.proxy() as data:
                data['–ë—É–º–∞–≥–∞'] = message.text.split('‚≠ê')[0]
                papers = {'500—à—Ç': 0, '1000—à—Ç': 1, '2500—à—Ç': 2, '5000—à—Ç': 3, '10000—à—Ç': 4}
                data['–°—Ç–æ–∏–º–æ—Å—Ç—å'] = count_price_of_booklets(papers[data['–¢–∏—Ä–∞–∂']], data['–†–∞–∑–º–µ—Ä'].split()[0],
                                                            int(data['–ë—É–º–∞–≥–∞'].split()[2]))
            choice_bottom = ['–í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–µ—Ä–µ–π–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚úÖ', '–ó–∞–∫–∞–∑–∞—Ç—å –º–∞–∫–µ—Ç —É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ üë©üèª‚Äçüé®']
            mark_up = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            mark_up.add(*choice_bottom)
            sticker = data_from_bot.get_content_for_client('sticker_design')
            await Main.st_choice.set()
            await bot.send_sticker(message.chat.id, sticker=sticker[0])
            await bot.send_message(message.chat.id, f'–°–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏—Ç:\n'
                                                    f'*{data["–°—Ç–æ–∏–º–æ—Å—Ç—å"]}*\n\n–£ –≤–∞—Å –µ—Å—Ç—å –¥–∏–∑–∞–π–Ω –º–∞–∫–µ—Ç?',
                                   reply_markup=mark_up, parse_mode='Markdown')
        else:
            await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!')

    async def get_design_layout(self, message: types.Message, state=FSMContext):
        async with state.proxy() as data:
            if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å –º–∞–∫–µ—Ç —É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ üë©üèª‚Äçüé®':
                data['–î–∏–∑–∞–π–Ω–µ—Ä'] = ''
                await Main.st_design_application.set()
                await bot.send_message(message.chat.id,
                                       '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –º–∞–∫–µ—Ç–∞ 700—Ä, –¥–ª—è –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–µ–≥–æ 1200—Ä.\n'
                                       '–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏.',
                                       reply_markup=Main.touch_send_application)
            elif message.text == '–í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–µ—Ä–µ–π–¥–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é ‚úÖ':
                try:
                    os.mkdir('files/{}{}'.format(str(message.from_user.username), message.from_user.id))
                    os.mkdir(
                        'files/{}{}/{}'.format(str(message.from_user.username), message.from_user.id, data['–£—Å–ª—É–≥–∞']))
                    os.mkdir(
                        'files/{}{}/{}/{}'.format(str(message.from_user.username), message.from_user.id, data['–£—Å–ª—É–≥–∞'],
                                                  data['–¢–∏—Ä–∞–∂']))
                except FileExistsError:
                    pass
                await Main.st_files.set()
                await bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª. –†–µ–∫–æ–º–µ–Ω–¥–∞–≤–∞–Ω–æ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è TIFF, CMD...',
                                       reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).
                                       add(types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂')))

    async def get_layout_files(self, message: types.Message, state=FSMContext):
        try:
            if message.text != '/start':
                async with state.proxy() as data:
                    file_path = 'files/{}{}/{}/{}'.format(str(message.from_user.username), message.from_user.id,
                                                          data['–£—Å–ª—É–≥–∞'], data['–¢–∏—Ä–∞–∂'])
                    if message.document:
                        img_id = await bot.get_file(message.document.file_id)
                        foo, extension = img_id.file_path.split('.')
                        saved_image = '{}/{}{}'.format(file_path, img_id.file_id, f'.{extension}')
                        await message.document.download(f'{saved_image}')
                        await bot.send_message(message.chat.id, '–ú–∞–∫–µ—Ç –ø–æ–ª—É—á–µ–Ω. –£—Ä–∞!')
                    elif message.text:
                        if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É üì∂':
                            file_path_os = os.listdir(path=file_path)
                            if len(file_path_os) > 0:
                                ready_date = datetime.today() + timedelta(days=+6)
                                await Main.st_application.set()
                                await bot.send_message(message.chat.id,
                                                       f'–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–∞–≤–∞–Ω–∞. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–Ω–∏–º–∞–µ—Ç 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. '
                                                       f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {ready_date.strftime("%d.%m")}\n'
                                                       f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=Main.touch_send_application)
                            else:
                                await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫–µ—Ç!')
            else:
                await state.finish()
                await client.create_main_bottom(message)
        except:
            await Main.st_files.set()
            await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞–∫–µ—Ç.')

    async def application(self, message: types.Message, state=FSMContext):
        async with state.proxy() as data:
            today = datetime.today()
            time_now = datetime.now()
            data_from_bot.add_content(today.strftime('%d.%m.%y'), time_now.strftime('%H:%M'), str(message.from_user.id),
                                      '@' + str(message.from_user.username),
                                      data['–£—Å–ª—É–≥–∞'], data['–°—Ç–æ–∏–º–æ—Å—Ç—å'])
            mess_text = ''
            for key, value in data.items():
                mess_text += '{} - {}\n'.format(key, value)
            sticker = data_from_bot.get_content_for_client('sticker_admin')
            await bot.send_sticker(message.chat.id, sticker=sticker[0])
            await bot.send_message(message.chat.id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞: \n{mess_text}',
                                   reply_markup=types.ReplyKeyboardRemove())
            if message.from_user.username is not None:
                await bot.send_message(message.chat.id, '–Ø —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –í–∞—à—É –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. '
                                                        '–û–Ω —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è! \n\n–ï—Å–ª–∏ –¥–µ–ª–æ —Å—Ä–æ—á–Ω–æ–µ, –í—ã –º–æ–∂–µ—Ç–µ '
                                                        '—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É üë®‚Äçüíª',
                                       reply_markup=Main.inline_touch_admin)
            else:
                await bot.send_message(message.chat.id,
                                       '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–∂–∞—Ç–∏–µ–º —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ ‚¨áÔ∏è',
                                       reply_markup=Main.inline_touch_admin)
                await bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º,'
                                                        ' –∑–∞–¥–∞–π—Ç–µ —Å–µ–±–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Å—ã–ª–∫—É) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö '
                                                        '–¢–µ–ª–µ–≥—Ä–∞–º–º üìå')
            mess_text += '–ö–ª–∏–µ–Ω—Ç - @{}\n–ò–º—è - {}'.format(str(message.from_user.username), message.from_user.first_name)
            await bot.send_message(CHANNEL_ID_ADMIN, mess_text)
            await state.finish()
            await client.create_main_bottom(message)

    async def design_application(self, message: types.Message, state=FSMContext):
        async with state.proxy() as data:
            if message.text != '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ':
                data['–î–∏–∑–∞–π–Ω–µ—Ä'] += message.text + '\n'
            else:
                sticker = data_from_bot.get_content_for_client('sticker_admin')
                await bot.send_sticker(message.chat.id, sticker=sticker[0])
                if message.from_user.username is not None:
                    await bot.send_message(message.chat.id, '–Ø —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –î–∏–∑–∞–π–Ω–µ—Ä—É, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ '
                                                            '—Å–≤—è–∂–µ—Ç—Å—è! \n\n'
                                                            '–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å '
                                                            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–£—Å–ø–µ—Ö–æ–≤!',
                                           reply_markup=Main.inline_touch_admin)
                else:
                    await bot.send_message(message.chat.id,
                                           '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n–£—Å–ø–µ—Ö–æ–≤!',
                                           reply_markup=Main.inline_touch_admin)
                mess_text = f'–î–ª—è –î–∏–∑–∞–π–Ω–µ—Ä–∞\n–£—Å–ª—É–≥–∞: {data["–£—Å–ª—É–≥–∞"]}\n–¢–∏—Ä–∞–∂: {data["–¢–∏—Ä–∞–∂"]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:' \
                            f'\n{data["–î–∏–∑–∞–π–Ω–µ—Ä"]}'
                mess_text += '\n–ö–ª–∏–µ–Ω—Ç - @{}\n–ò–º—è - {}'.format(str(message.from_user.username),
                                                               message.from_user.first_name)
                await bot.send_message(CHANNEL_ID_ADMIN, mess_text)
                await state.finish()
                await client.create_main_bottom(message)

    def booklets_register_handlers(dp: Dispatcher):
        dp.register_message_handler(Main.get_amount, state=None)
        dp.register_message_handler(Main.get_size, state=Main.st_amount)
        dp.register_message_handler(Main.get_paper, state=Main.st_size)
        dp.register_message_handler(main_decorator(Main.get_choice_design), state=Main.st_type_paper)
        dp.register_message_handler(main_decorator(Main.get_design_layout), state=Main.st_choice)
        dp.register_message_handler(Main.get_layout_files, content_types=['document', 'text'],
                                    state=Main.st_files)
        dp.register_message_handler(main_decorator(Main.design_application),
                                    state=Main.st_design_application)
        dp.register_message_handler(main_decorator(Main.application), state=Main.st_application)


class Booklets(Main):
    def __init__(self, name, amount_poly, sizes_booklets, papers_poly):
        self.name = name
        self.amount_poly = amount_poly
        self.sizes_booklets = sizes_booklets
        self.papers_poly = papers_poly
